[tool.poetry]
name = "gptme"
version = "0.20.0"
description = "A fancy CLI to interact with LLMs in a Chat-style interface, with additional capabilities like executing commands on the local machine."
authors = ["Erik Bj√§reholt <erik@bjareho.lt>"]
readme = "README.md"
license = "MIT"
packages = [
    { include = "gptme" },
]

include = ["gptme/server/static/**/*", "media/logo.png"]

[tool.poetry.scripts]
gptme = "gptme.cli:main"
gptme-server = "gptme.server.cli:main"
gptme-eval = "gptme.eval.main:main"

[tool.poetry.dependencies]
python = "^3.10"
click = "^8.0"
python-dotenv = "^1.0.0"
rich = "^13.5.2"
tabulate = "*"
pick = "^2.2.0"
tiktoken = "^0.7"
tomlkit = "*"
typing-extensions = "*"
platformdirs = "^4.3"
lxml = "*"

# tools
ipython = "^8.17.2"
bashlex = "^0.18"
playwright = {version = "1.47.*", optional=true}  # version constrained due to annoying to have to run `playwright install` on every update
youtube_transcript_api = {version = "^0.6.1", optional = true}

# providers
openai = "^1.0"
anthropic = "^0.34.0"

# evals
multiprocessing-logging = "^0.3.4"

# datascience essentials
matplotlib = {version = "*", optional=true}
pandas = {version = "*", optional=true}
numpy = {version = "*", optional=true}
pillow = {version = "*", optional=true}

# server
flask = {version = "^3.0", optional=true}

[tool.poetry.group.dev.dependencies]
# lint
mypy = "*"
ruff = "*"

# test
pytest = "^8.0"
pytest-cov = "*"
pytest-xdist = "^3.5.0"
pytest-profiling = "^1.7.0"
pytest-dotenv = "^0.5.2"
pytest-timeout = "^2.2.0"
pytest-retry = "^1.6.3"
greenlet = "*"  # dependency of playwright, but needed for coverage

# docs
sphinx = "^8.0"
sphinx-click = "^6.0"
sphinx-book-theme = "^1.0.1"
sphinxcontrib-programoutput = "^0.17"
sphinxcontrib-asciinema = "^0.4.2"
myst-parser = "*"

# types
types-tabulate = "*"
types-lxml = "*"

[tool.poetry.extras]
server = ["flask"]
browser = ["playwright"]
datascience = ["matplotlib", "pandas", "numpy", "pillow"]
all = [
    # server
    "flask",
    # browser
    "playwright",
    # datascience
    "matplotlib", "pandas", "numpy", "pillow",
]

[tool.ruff]
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F", "B", "UP"]
ignore = ["E402", "E501", "B905"]
#fixable = ["ALL"]
#unfixable = ["B"]

[tool.pytest.ini_options]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "eval: marks tests as evals (deselect with '-m \"not eval\"'), these may fail, and will not run in CI",
    "serial",
]

[tool.coverage.run]
# Needed to get playwright to play nice with coverage
# https://stackoverflow.com/a/28589618/965332
concurrency = ["greenlet"]
#branch = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain if tests don't hit defensive assertion code
    "raise NotImplementedError",

    # Don't complain about interactive stuff
    "except KeyboardInterrupt:",
    "if interactive:",
    "if ask:",

    # Don't complain if non-runnable code isn't run:
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]


# TODO: migrate to PEP 621 once supported by poetry
#[project]
#name = "gptme"
#dynamic = ["version"]
#
#[tool.setuptools.dynamic]
#version = {attr = "mymodule.__version__"}

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
